params {
    max_cpus   = 96
    max_memory = '386.GB'
    max_time   = '8.h'
    
    //base2fastq input
    run_dir = null

    // b2f args
    b2f_args = null
    legacy_fastq= null
    detect_adapters= null
    exclude_tile=[]
    include_tile=[]
    filter_mask=null
    flowcell_id= null
    force_index_orientation= null
    no_error_on_invalid=true
    num_unassigned=null
    qc_only= null
    run_manifest= null
    settings=[]
    split_lanes= null

    //container
    b2f_container_url = "docker.io/elembio/bases2fastq"
    b2f_container_tag = "latest"

    // Boilerplate options
    outdir                     = '.'
    tracedir                   = "${params.outdir}/pipeline_info"
    enable_conda               = false

    // Config options
    publish_dir_mode           = 'copy'
    custom_config_version      = 'master'
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_description = null
    config_profile_contact     = null
    config_profile_url         = null
    config_profile_name        = null
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

manifest {
    name            = 'elembio/base2fastq'
    author          = 'Andrew Altomare, Bryan R. Lajoie, Rosita Bajari, Max Mass, Kelly Wiseman, Edmund Miller, Ryan Kelley'
    homePage        = 'https://github.com/Elembio/bases2fastq-nf'
    description     = 'FASTQ generation using Bases2Fastq for Element AVITI System'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.10.3'
    version         = '1.0.0'
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

profiles {
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }

    test { includeConfig 'conf/test.config' }
    test_local { includeConfig 'conf/test_local.config' }
    test_custom_manifest_s3 { includeConfig 'conf/test_custom_manifest_s3.config' }
    test_custom_manifest_local { includeConfig 'conf/test_custom_manifest_local.config' }
    test_custom_manifest_rundir { includeConfig 'conf/test_custom_manifest_rundir.config' }
    test_index_fastq { includeConfig 'conf/test_index_fastq.config' }
    test_legacy_fastq { includeConfig 'conf/test_legacy_fastq.config' }
    test_projects { includeConfig 'conf/test_projects.config' }
    test_noprojects { includeConfig 'conf/test_noprojects.config' }
    test_qc_only { includeConfig 'conf/test_qc_only.config' }
    test_s3 { includeConfig 'conf/test_s3.config' }
    test_s3_zipped { includeConfig 'conf/test_s3_zipped.config' }
    notaskdir { includeConfig 'conf/notaskdir.config' }
    AVITI { includeConfig 'conf/AVITI.config' }
    AVITI_highmem { includeConfig 'conf/AVITI_highmem.config' }
    ElembioCloud { includeConfig 'conf/ElembioCloud.config' }
    tower { includeConfig 'conf/tower.config' }
}

def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}